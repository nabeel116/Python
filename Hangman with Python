import numpy as np

def play_game(secret_word):
    secret_word = secret_word.upper()

    INITIAL_GUESSES = 6
    Guess = list("_" * len(secret_word))
    print("Lets play Hangman")
    count = 0
    wrong_count = 0
    hangman_stage = 7
    print(display_hangman(hangman_stage-1))
    print("The word now looks like this :", "".join(Guess))
    print("You have", INITIAL_GUESSES, "guesses left")

    while count < INITIAL_GUESSES:

        inp = input("Type a single letter here, then press enter: ")
        inp = inp.upper()

        if len(inp) > 1 or inp.isalpha() == False:
            print("Guess should only be a single alphabet.")
            print("The word now looks like this :", "".join(Guess))
            print("You have ", INITIAL_GUESSES - count, "Guess remaining.")
            print()

        elif inp not in secret_word:
            count += 1
            wrong_count += 1
            print("There are no", inp, "'s in the word")
            print(display_hangman(hangman_stage - (wrong_count+1)))
            print("The word now looks like this :", "".join(Guess))
            print("You have ", INITIAL_GUESSES - count, "Guess remaining.")
            print()

        elif inp in secret_word:
            boolean_locations = []
            for i in secret_word:
                boolean_locations.append(i == inp)
            boolean_locations_array = np.array(boolean_locations)
            word_array = np.array(list(secret_word))
            number_of_inp_repetitions = len(word_array[boolean_locations_array])  # we now know how many repetitions

            if number_of_inp_repetitions == 1:
                print("That guess is correct")
                location = secret_word.find(inp)
                Guess[location] = inp
                count+=1
                print("The word now looks like this :", "".join(Guess))
                print("You have ", INITIAL_GUESSES - count, "Guess remaining.")

            elif number_of_inp_repetitions > 1:
                print("That guess is correct")
                indexes = [i for i, j in enumerate(boolean_locations) if j]
                for i in indexes:
                    Guess[i] = inp
                print("The word now looks like this :", "".join(Guess))
                count += 1
                print("You have ", INITIAL_GUESSES - count, "Guess remaining.")

        if Guess == list(secret_word):
            print("Congratulations, the word is: ", secret_word)
            break

        if count == INITIAL_GUESSES:
            print("Sorry, you lost. The secret word was :", secret_word)



def display_hangman(count):
    stages = [  # final state: head, torso, both arms, and both legs
                """
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / \\
                   -
                """,
                # head, torso, both arms, and one leg
                """
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / 
                   -
                """,
                # head, torso, and both arms
                """
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |      
                   -
                """,
                # head, torso, and one arm
                """
                   --------
                   |      |
                   |      O
                   |     \\|
                   |      |
                   |     
                   -
                """,
                # head and torso
                """
                   --------
                   |      |
                   |      O
                   |      |
                   |      |
                   |     
                   -
                """,
                # head
                """
                   --------
                   |      |
                   |      O
                   |    
                   |      
                   |     
                   -
                """,
                # initial empty state
                """
                   --------
                   |      |
                   |      
                   |    
                   |      
                   |     
                   -
                """
    ]
    return stages[count]

def get_word():
    data= [#LIST OF WORD CHOICES]
 
    secret_word=np.random.choice(data)
    return secret_word


def main():
    """
    To play the game, we first select the secret word for the
    player to guess and then play the game using that secret word.
    """
    secret_word = get_word()
    play_game(secret_word)


if __name__ == "__main__":
    main()
